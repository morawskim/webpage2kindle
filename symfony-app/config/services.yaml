# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    env(APP_PASSWORD): 'hashedsecretpassword__encoded-in-base64'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Broadway\EventStore\Dbal\DBALEventStore: '@broadway.event_store.dbal'
    Broadway\CommandHandling\CommandBus: '@broadway.command_handling.event_dispatching_command_bus'
    Broadway\UuidGenerator\UuidGeneratorInterface: '@broadway.uuid.generator'
    Broadway\EventStore\EventStore: '@broadway.event_store.dbal'
    Broadway\EventHandling\EventBus: '@broadway.event_handling.event_bus'
    Broadway\EventStore\Management\EventStoreManagement: '@broadway.event_store.dbal'

    App\Job\JobCommandHandler:
        tags:
            - { name: broadway.command_handler }
    App\Job\Domain\JobRepository:
        arguments:
            $eventStreamDecorators:
              - '@broadway.metadata_enriching_event_stream_decorator'
    App\Job\DbalGetNewestJobs:
        arguments:
            $connection: '@doctrine.dbal.default_connection'
            $payloadSerializer: '@broadway.serializer.payload'
            $metadataSerializer: '@broadway.serializer.metadata'
            $useBinary: false
            $tableName: 'events'

    # prometheus metrics
    App\Job\PageContentFetcher\GoReadabilitySynchronousPageContentFetcher:
        arguments:
            $pathToCommand: '%env(GO_READABILITY_PATH)%'
    App\Job\PageContentFetcher\PrometheusMetricDecorator:
        arguments:
            $pageContentFetcher: '@App\Job\PageContentFetcher\GoReadabilityApiPageContentFetcher'
            $prometheusAdapterLabel: 'GoReadability'
    App\Job\PageContentFetcher\PageContentFetcherInterface: '@App\Job\PageContentFetcher\PrometheusMetricDecorator'

    App\Job\ReadablePageContent\NodeMicroserviceCreateReadablePageContent: ~
    App\Job\ReadablePageContent\PrometheusMetricDecorator:
        arguments:
            $createReadablePageContent: '@App\Job\ReadablePageContent\NodeMicroserviceCreateReadablePageContent'
            $prometheusAdapterLabel: 'NodeMicroservice'
    App\Job\ReadablePageContent\CreateReadablePageContentInterface: '@App\Job\ReadablePageContent\PrometheusMetricDecorator'

    App\Job\PushToKindleUrlGenerator\PastePadUrlGenerator: ~
    App\Job\PushToKindleUrlGenerator\PushToKindleUrlGeneratorInterface: '@App\Job\PushToKindleUrlGenerator\PastePadUrlGenerator'

    prometheus_storage:
        class: Prometheus\Storage\Redis
        factory: 'App\Infrastructure\Prometheus\RedisAdapterFactory::fromSymfonyRedisDSN'
        arguments:
            $dsn: '%env(REDIS_DNS)%'

    Prometheus\CollectorRegistry:
        class: Prometheus\CollectorRegistry
        arguments:
            $storageAdapter: '@prometheus_storage'
    Prometheus\RenderTextFormat: ~
    App\Controller\MetricController:
        tags: ['controller.service_arguments']
